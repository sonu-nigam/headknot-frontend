import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import {
    ColorSchemeScript,
    mantineHtmlProps,
    MantineProvider,
} from "@mantine/core";
import { theme } from "../theme";
import "./globals.css";
import "@mantine/core/styles.css";
import "@mantine/tiptap/styles.css";
import { ReactQueryClientProvider } from "@/components/ReactQueryClientProvider";
import { getSession } from "next-auth/react";
import { ReactNode } from "react";
import ClientSession from "./ClientSession";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};

export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en" {...mantineHtmlProps}>
            <head>
                <link rel="shortcut icon" href="/favicon.svg" />
                <meta
                    name="viewport"
                    content="minimum-scale=1, initial-scale=1, width=device-width, user-scalable=no"
                />
                <ColorSchemeScript defaultColorScheme="auto" />
            </head>
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
            >
                <ReactQueryClientProvider>
                    <MantineProvider theme={theme}>{children}</MantineProvider>
                </ReactQueryClientProvider>
            </body>
        </html>
    );
}

async function ServerSession({ children }: { children: ReactNode }) {
    const session = await getSession();
    return <ClientSession session={session}>{children}</ClientSession>;
}
